# AP2 Protocol: Agent Payments Protocol

## Overview

The Age### 2. Cart Mandate

After finding options, the agent builds a cart and seek### 3. Payment Mandate

With the cart approved, the agent executes payment. The Payment Mandate:

- References the Cart Mandate
- Includes payment details and methods
- Provides context to payment processors
- Completes the authorization chain

```java
// Example from our PaymentMandate.java implementation
Map<String, Object> paymentDetails = new HashMap<>();
paymentDetails.put("paymentMethodId", "card-123");

PaymentMandate paymentMandate = new PaymentMandate(
    "payment-789",                // Unique ID
    "user-agent-456",             // Requesting agent
    "merchant-789",               // Receiving agent/merchant
    "order-321",                  // Payment reference
    new BigDecimal("95.00"),      // Amount
    "USD",                        // Currency
    "cart-456",                   // Parent Cart Mandate ID
    paymentDetails,               // Payment details
    Instant.now().plusMinutes(15) // Expiration
);
```

## Mandate Verification

Our implementation includes a `DefaultMandateVerifier` that ensures:

1. All mandates are properly signed
2. No mandate has expired
3. Each mandate references its parent correctly
4. Transaction details match across mandates
5. Payment constraints are respected

```java
// Example verification from DefaultMandateVerifier.java
boolean isValid = mandateVerifier.verifyIntentMandate(intentMandate, paymentRequest);
if (isValid) {
    isValid = mandateVerifier.verifyCartMandate(cartMandate, intentMandate, paymentRequest);
    if (isValid) {
        isValid = mandateVerifier.verifyPaymentMandate(paymentMandate, cartMandate, paymentRequest);
    }
}
```al. The Cart Mandate is another VC that:

- References the original Intent Mandate
- Contains specific items and prices
- Is cryptographically signed by the user

```java
// Example from our CartMandate.java implementation
List<CartMandate.CartItem> items = new ArrayList<>();
items.add(new CartMandate.CartItem(
    "item-123",                   // Item ID
    "Nike Air Zoom Pegasus",      // Description
    new BigDecimal("95.00"),      // Price
    1                             // Quantity
));

CartMandate cartMandate = new CartMandate(
    "cart-456",                   // Unique ID 
    "user-agent-456",             // Requesting agent
    "merchant-789",               // Receiving agent/merchant
    "intent-123",                 // Parent Intent Mandate ID
    items,                        // List of items
    "USD",                        // Currency
    Instant.now().plusMinutes(30) // Expiration
);
```AP2 Mandate Flow

The AP2 protocol implements a chain of authorization through three types of mandates:

### 1. Intent Mandate

When a user instructs an agent (e.g., "Buy running shoes under $100"), the agent creates an Intent Mandate, which is a verifiable credential (VC) that captures:

- The user's intention (purchase running shoes)
- Constraints (price under $100)
- Authorization scope (e.g., one-time vs. ongoing)

```java
// Example from our IntentMandate.java implementation
IntentMandate mandate = new IntentMandate(
    "intent-123",                 // Unique ID
    "user-agent-456",             // Requesting agent
    "merchant-789",               // Receiving agent/merchant
    new BigDecimal("100.00"),     // Maximum allowed amount
    true                          // Requires human approval
);
mandate.setAllowedCategories(Collections.singletonList("shoes"));
```ol (AP2) addresses a fundamental challenge in AI agent interactions: enabling secure, authorized financial transactions on behalf of users. This document explains how AP2 works in the context of our Java implementation.

## Core Challenges Addressed by AP2

Traditional e-commerce assumes a human is directly making the purchase (clicking "buy" etc.). Agentic AI changes that assumption: agents might act on user behalf, possibly even with minimal human involvement. That raises new challenges:

1. **Authorization**: Ensuring the user properly authorized an agent to make purchases.
2. **Authenticity**: Verifying that transactions reflect what the user actually intended.
3. **Accountability**: Creating an audit trail to trace responsibility if something goes wrong.

AP2 is meant to provide a standard, interoperable foundation so that multiple parties (agents, merchants, payments providers, regulators etc.) can rely on shared assumptions and tools.xample Walk-Through

Traditional e-commerce assumes a human is directly making the purchase (clicking ‚Äúbuy‚Äù etc.). Agentic AI changes that assumption: agents might act on user behalf, possibly even with minimal human involvement. That raises new challenges:

Authorization: Was the user‚Äôs permission properly obtained for that purchase? Did they explicitly authorize the agent for that action? 
Google Cloud
+1

Authenticity: Does the request truly reflect what the user intended? I.e. did the agent misinterpret or go off-script in some way? 
Google Cloud
+1

Accountability: If something goes wrong (fraud, wrong product, incorrect amount etc.), how can it be traced, who is responsible, how can disputes be resolved? 
Google Cloud
+1

AP2 is meant to provide a standard, interoperable foundation so that multiple parties (agents, merchants, payments providers, regulators etc.) can rely on shared assumptions and tools.

From the Google / AP2 spec and press coverage:

User sets an intent
Suppose you tell your agent: ‚ÄúBuy a pair of running shoes, size 10, under $100.‚Äù That creates an Intent Mandate: a verifiable credential (VC) capturing what you‚Äôve authorized the agent to do, under what constraints. 
Venturebeat
+3
apidog
+3
ap2-protocol.org
+3

Agent finds options and builds a cart
The agent then queries merchants, perhaps over APIs, to find shoes meeting the size & price constraints + shipping/tax. It composes a ‚Äúcart‚Äù (items + price + any extra info). 
apidog
+1

Cart Mandate
When the user is present (or via an interactive flow), the agent asks you to approve the cart. You sign off via a Cart Mandate, which is also a VC. 
ap2-protocol.org
+1

Payment Execution
With the cart mandated, the agent goes through payment with the merchant/payment network. A Payment Mandate may also be involved to tell the payment processor that this transaction is being done by an agent with user‚Äôs authorization and provide context (human present or not). 
ap2-protocol.org

Audit & Traceability
Throughout, the flow is cryptographically signed, and each mandate is part of a chain so one can verify: ‚ÄúDid the agent have authority? Did the user approve this cart? Are the items & prices as agreed?‚Äù This helps with fraud prevention, dispute resolution, accountability. 
Google Cloud
+2
ap2-protocol.org
+2

Support for different payment types / rails
AP2 supports credit/debit cards, stablecoins/crypto, real-time bank transfers, etc. It also has ‚Äúx402‚Äù extension for crypto rails among others. 
Venturebeat
+2
ap2-protocol.org
+2

How AP2 works ‚Äî Example Walk-Through

From the Google / AP2 spec and press coverage:

User sets an intent
Suppose you tell your agent: ‚ÄúBuy a pair of running shoes, size 10, under $100.‚Äù That creates an Intent Mandate: a verifiable credential (VC) capturing what you‚Äôve authorized the agent to do, under what constraints. 
Venturebeat
+3
apidog
+3
ap2-protocol.org
+3

Agent finds options and builds a cart
The agent then queries merchants, perhaps over APIs, to find shoes meeting the size & price constraints + shipping/tax. It composes a ‚Äúcart‚Äù (items + price + any extra info). 
apidog
+1

Cart Mandate
When the user is present (or via an interactive flow), the agent asks you to approve the cart. You sign off via a Cart Mandate, which is also a VC. 
ap2-protocol.org
+1

Payment Execution
With the cart mandated, the agent goes through payment with the merchant/payment network. A Payment Mandate may also be involved to tell the payment processor that this transaction is being done by an agent with user‚Äôs authorization and provide context (human present or not). 
ap2-protocol.org

Audit & Traceability
Throughout, the flow is cryptographically signed, and each mandate is part of a chain so one can verify: ‚ÄúDid the agent have authority? Did the user approve this cart? Are the items & prices as agreed?‚Äù This helps with fraud prevention, dispute resolution, accountability. 
Google Cloud
+2
ap2-protocol.org
+2

Support for different payment types / rails
AP2 supports credit/debit cards, stablecoins/crypto, real-time bank transfers, etc. It also has ‚Äúx402‚Äù extension for crypto rails among others.

## Implementation Details

Our Java implementation follows these key principles:

- **Verifiable Credentials**: All mandates implement the VerifiableCredential interface
- **Cryptographic Security**: Signatures ensure mandate integrity and authenticity
- **Expiration Controls**: All mandates have built-in expiration for security
- **Validation Logic**: Comprehensive checks for mandate validity and consistency
- **Payment Processing**: Clean integration with various payment methods

## Usage Examples

The `SimplePaymentExample` and `AP2IntegrationExample` classes demonstrate how to:

1. Create payment-enabled agents
2. Generate and verify mandates
3. Process payment requests through the AP2 protocol
4. Handle authorization and capture flows
5. Integrate with the A2A (Agent-to-Agent) protocol

## Technical Architecture

AP2 is designed to sit on top of A2A (Agent-to-Agent) which itself is JSON-RPC-based (with optional gRPC/HTTP transports).

That means AP2 flows (Intent Mandate, Cart Mandate, Payment Mandate, etc.) are exchanged as JSON-RPC messages carrying verifiable credentials (VCs) as payloads. The VCs are JSON-LD documents (signed with cryptographic proofs), and the JSON-RPC envelope carries them between agents, merchants, and payment processors.

üîπ Example: Intent Mandate Request (JSON-RPC)
{
  "jsonrpc": "2.0",
  "id": "req-123",
  "method": "ap2.createIntentMandate",
  "params": {
    "userId": "user-456",
    "intent": {
      "@context": "https://www.w3.org/2018/credentials/v1",
      "type": ["VerifiableCredential", "IntentMandate"],
      "issuer": "did:example:user-456",
      "credentialSubject": {
        "action": "purchase",
        "item": "running shoes",
        "constraints": {
          "size": "10",
          "maxPrice": 100,
          "currency": "USD"
        }
      },
      "issuanceDate": "2025-09-17T14:30:00Z",
      "proof": {
        "type": "Ed25519Signature2020",
        "created": "2025-09-17T14:30:00Z",
        "verificationMethod": "did:example:user-456#keys-1",
        "jws": "eyJ..."
      }
    }
  }
}

üîπ Example: Cart Mandate Approval (JSON-RPC)
{
  "jsonrpc": "2.0",
  "id": "req-124",
  "method": "ap2.signCartMandate",
  "params": {
    "cart": {
      "items": [
        {
          "name": "Nike Air Zoom Pegasus",
          "size": "10",
          "price": 95,
          "currency": "USD"
        }
      ],
      "total": 95,
      "merchant": "did:example:merchant-789"
    },
    "mandate": {
      "@context": "https://www.w3.org/2018/credentials/v1",
      "type": ["VerifiableCredential", "CartMandate"],
      "issuer": "did:example:user-456",
      "credentialSubject": {
        "cartId": "cart-321",
        "approved": true
      },
      "proof": {
        "type": "Ed25519Signature2020",
        "created": "2025-09-17T14:35:00Z",
        "verificationMethod": "did:example:user-456#keys-1",
        "jws": "eyJ..."
      }
    }
  }
}

üîπ Example: Payment Execution Request (JSON-RPC)
{
  "jsonrpc": "2.0",
  "id": "req-125",
  "method": "ap2.executePayment",
  "params": {
    "paymentMandate": {
      "@context": "https://www.w3.org/2018/credentials/v1",
      "type": ["VerifiableCredential", "PaymentMandate"],
      "issuer": "did:example:user-456",
      "credentialSubject": {
        "amount": 95,
        "currency": "USD",
        "merchant": "did:example:merchant-789",
        "paymentMethod": "credit_card"
      },
      "proof": {
        "type": "Ed25519Signature2020",
        "created": "2025-09-17T14:40:00Z",
        "verificationMethod": "did:example:user-456#keys-1",
        "jws": "eyJ..."
      }
    }
  }
}

üîπ Notes

- method field = AP2-specific extension methods (on top of A2A JSON-RPC).
- VCs (Verifiable Credentials) = JSON-LD docs with cryptographic signatures.
- Proofs ensure integrity and traceability.
- Transport = JSON-RPC (can be over HTTP, WebSockets, or gRPC)

## Security Considerations

Our implementation addresses:

- Expiration of credentials
- Proper chain of authority
- Payment amount verification
- Merchant identity verification
- User-approved constraints